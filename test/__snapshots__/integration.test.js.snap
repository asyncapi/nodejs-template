// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`template integration tests for generated files using the generator and mqtt example should generate proper handlers and routes files 1`] = `
"
const handler = module.exports = {};

/**
 * 
 * @param {object} options
 * @param {object} options.message
 * @param {integer} options.message.headers.my-app-header
 * @param {integer} options.message.payload.percentage - Percentage to which the light should be dimmed to.
 * @param {string} options.message.payload.sentAt - Date and time when the message was sent.
 */
handler.dimLight = async ({message}) => {
  // Implement your business logic here...
};
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should generate proper handlers and routes files 2`] = `
"
const handler = module.exports = {};

/**
 * 
 * @param {object} options
 * @param {object} options.message
 * @param {integer} options.message.headers.my-app-header
 * @param {string} options.message.payload.command - Whether to turn on or off the light.
 * @param {string} options.message.payload.sentAt - Date and time when the message was sent.
 */
handler.turnOff = async ({message}) => {
  // Implement your business logic here...
};
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should generate proper handlers and routes files 3`] = `
"
const handler = module.exports = {};

/**
 * 
 * @param {object} options
 * @param {object} options.message
 * @param {integer} options.message.headers.my-app-header
 * @param {string} options.message.payload.command - Whether to turn on or off the light.
 * @param {string} options.message.payload.sentAt - Date and time when the message was sent.
 */
handler.turnOn = async ({message}) => {
  // Implement your business logic here...
};
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should generate proper handlers and routes files 4`] = `
"
const handler = module.exports = {};

/**
 * Inform about environmental lighting conditions of a particular streetlight.
 * @param {object} options
 * @param {object} options.message
 * @param {integer} options.message.headers.my-app-header
 * @param {integer} options.message.payload.lumens - Light intensity measured in lumens.
 * @param {string} options.message.payload.sentAt - Date and time when the message was sent.
 */
handler.receiveLightMeasurement = async ({message}) => {
  // Implement your business logic here...
};
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should generate proper handlers and routes files 5`] = `
"const Router = require('hermesjs/lib/router');
const {validateMessage} = require('../../lib/message-validator');
const router = new Router();
const smartylightingStreetlights10ActionStreetlightIdDimHandler = require('../handlers/smartylighting-streetlights-1-0-action-{streetlightId}-dim');
module.exports = router;



router.useOutbound('smartylighting/streetlights/1/0/action/:streetlightId/dim', async (message, next) => {
  try {
    
    await validateMessage(message.payload,'smartylighting/streetlights/1/0/action/{streetlightId}/dim','dimLight','subscribe');
    await smartylightingStreetlights10ActionStreetlightIdDimHandler.dimLight({message});
    next();
    
  } catch (e) {
    next(e);
  }
});
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should generate proper handlers and routes files 6`] = `
"const Router = require('hermesjs/lib/router');
const {validateMessage} = require('../../lib/message-validator');
const router = new Router();
const smartylightingStreetlights10ActionStreetlightIdTurnOffHandler = require('../handlers/smartylighting-streetlights-1-0-action-{streetlightId}-turn-off');
module.exports = router;



router.useOutbound('smartylighting/streetlights/1/0/action/:streetlightId/turn/off', async (message, next) => {
  try {
    
    await validateMessage(message.payload,'smartylighting/streetlights/1/0/action/{streetlightId}/turn/off','turnOnOff','subscribe');
    await smartylightingStreetlights10ActionStreetlightIdTurnOffHandler.turnOff({message});
    next();
    
  } catch (e) {
    next(e);
  }
});
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should generate proper handlers and routes files 7`] = `
"const Router = require('hermesjs/lib/router');
const {validateMessage} = require('../../lib/message-validator');
const router = new Router();
const smartylightingStreetlights10ActionStreetlightIdTurnOnHandler = require('../handlers/smartylighting-streetlights-1-0-action-{streetlightId}-turn-on');
module.exports = router;



router.useOutbound('smartylighting/streetlights/1/0/action/:streetlightId/turn/on', async (message, next) => {
  try {
    
    await validateMessage(message.payload,'smartylighting/streetlights/1/0/action/{streetlightId}/turn/on','turnOnOff','subscribe');
    await smartylightingStreetlights10ActionStreetlightIdTurnOnHandler.turnOn({message});
    next();
    
  } catch (e) {
    next(e);
  }
});
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should generate proper handlers and routes files 8`] = `
"const Router = require('hermesjs/lib/router');
const {validateMessage} = require('../../lib/message-validator');
const router = new Router();
const smartylightingStreetlights10EventStreetlightIdLightingMeasuredHandler = require('../handlers/smartylighting-streetlights-1-0-event-{streetlightId}-lighting-measured');
module.exports = router;



/**
 * Inform about environmental lighting conditions of a particular streetlight.
 */
router.use('smartylighting/streetlights/1/0/event/:streetlightId/lighting/measured', async (message, next) => {
  try {
    
    await validateMessage(message.payload,'smartylighting/streetlights/1/0/event/{streetlightId}/lighting/measured','lightMeasured','publish');
    await smartylightingStreetlights10EventStreetlightIdLightingMeasuredHandler.receiveLightMeasurement({message});
    next();
    
  } catch (e) {
    next(e);
  }
});
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should generate proper handlers and routes files 9`] = `
"const Hermes = require('hermesjs');
const app = new Hermes();
const path = require('path');
const { yellow, gray, cyan } = require('chalk');
const buffer2string = require('./middlewares/buffer2string');
const string2json = require('./middlewares/string2json');
const json2string = require('./middlewares/json2string');
const logger = require('./middlewares/logger');
const errorLogger = require('./middlewares/error-logger');
const config = require('../lib/config');
const serverConfig = config.broker.mqtt;
const MqttAdapter = require('hermesjs-mqtt');
const smartylightingStreetlights10EventStreetlightIdLightingMeasured = require('./routes/smartylighting-streetlights-1-0-event-{streetlightId}-lighting-measured.js');
const smartylightingStreetlights10ActionStreetlightIdTurnOn = require('./routes/smartylighting-streetlights-1-0-action-{streetlightId}-turn-on.js');
const smartylightingStreetlights10ActionStreetlightIdTurnOff = require('./routes/smartylighting-streetlights-1-0-action-{streetlightId}-turn-off.js');
const smartylightingStreetlights10ActionStreetlightIdDim = require('./routes/smartylighting-streetlights-1-0-action-{streetlightId}-dim.js');

app.addAdapter(MqttAdapter, serverConfig);

app.use(buffer2string);
app.use(string2json);
app.use(logger);

// Channels
console.log(cyan.bold.inverse(' SUB '), gray('Subscribed to'), yellow('smartylighting/streetlights/1/0/event/{streetlightId}/lighting/measured'));
app.use(smartylightingStreetlights10EventStreetlightIdLightingMeasured);
console.log(yellow.bold.inverse(' PUB '), gray('Will eventually publish to'), yellow('smartylighting/streetlights/1/0/action/{streetlightId}/turn/on'));
app.useOutbound(smartylightingStreetlights10ActionStreetlightIdTurnOn);
console.log(yellow.bold.inverse(' PUB '), gray('Will eventually publish to'), yellow('smartylighting/streetlights/1/0/action/{streetlightId}/turn/off'));
app.useOutbound(smartylightingStreetlights10ActionStreetlightIdTurnOff);
console.log(yellow.bold.inverse(' PUB '), gray('Will eventually publish to'), yellow('smartylighting/streetlights/1/0/action/{streetlightId}/dim'));
app.useOutbound(smartylightingStreetlights10ActionStreetlightIdDim);

app.use(errorLogger);
app.useOutbound(errorLogger);
app.useOutbound(logger);
app.useOutbound(json2string);

app
  .listen()
  .then((adapters) => {
    console.log(cyan.underline(\`\${config.app.name} \${config.app.version}\`), gray('is ready!'), '\\\\n');
    adapters.forEach(adapter => {
      console.log('ðŸ”— ', adapter.name(), gray('is connected!'));
    });
  })
  .catch(console.error);
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should generate proper handlers and routes files 10`] = `
"default:
  app:
    name: Streetlights MQTT API
    version: 1.0.0

  broker:
    mqtt:
      url: mqtt://test.mosquitto.org:1883
      topics: [\\"smartylighting/streetlights/1/0/event/+/lighting/measured\\"]
      qos:
      protocol: mqtt
      retain:
      subscribe: true

development:

test:

staging:

production:
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should generate proper handlers and routes files 11`] = `
"{
  \\"name\\": \\"streetlights-mqtt-api\\",
  \\"description\\": \\"The Smartylighting Streetlights API allows you to remotely manage the city lights.  ### Check out its awesome features:  * Turn a specific streetlight on/off ðŸŒƒ * Dim a specific streetlight ðŸ˜Ž * Receive real-time information about environmental lighting conditions ðŸ“ˆ \\",
  \\"version\\": \\"1.0.0\\",
  \\"scripts\\": {
    \\"start\\": \\"node src/api/index.js\\"
  },
  \\"dependencies\\": {
    \\"chalk\\": \\"4.1.2\\",
    \\"dotenv\\": \\"8.1.0\\",
    \\"hermesjs\\": \\"2.x\\",
    \\"hermesjs-router\\": \\"1.x\\",
    \\"asyncapi-validator\\": \\"3.0.0\\",
    \\"hermesjs-mqtt\\": \\"2.x\\",
    
    \\"node-fetch\\": \\"2.6.0\\",
    \\"node-yaml-config\\": \\"0.0.4\\"
  }
}"
`;

exports[`template integration tests for generated files using the generator and mqtt example should use mqtt logic for mqtts protocol 1`] = `
"
const handler = module.exports = {};

/**
 * 
 * @param {object} options
 * @param {object} options.message
 * @param {integer} options.message.headers.my-app-header
 * @param {integer} options.message.payload.percentage - Percentage to which the light should be dimmed to.
 * @param {string} options.message.payload.sentAt - Date and time when the message was sent.
 */
handler.dimLight = async ({message}) => {
  // Implement your business logic here...
};
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should use mqtt logic for mqtts protocol 2`] = `
"
const handler = module.exports = {};

/**
 * 
 * @param {object} options
 * @param {object} options.message
 * @param {integer} options.message.headers.my-app-header
 * @param {string} options.message.payload.command - Whether to turn on or off the light.
 * @param {string} options.message.payload.sentAt - Date and time when the message was sent.
 */
handler.turnOff = async ({message}) => {
  // Implement your business logic here...
};
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should use mqtt logic for mqtts protocol 3`] = `
"
const handler = module.exports = {};

/**
 * 
 * @param {object} options
 * @param {object} options.message
 * @param {integer} options.message.headers.my-app-header
 * @param {string} options.message.payload.command - Whether to turn on or off the light.
 * @param {string} options.message.payload.sentAt - Date and time when the message was sent.
 */
handler.turnOn = async ({message}) => {
  // Implement your business logic here...
};
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should use mqtt logic for mqtts protocol 4`] = `
"
const handler = module.exports = {};

/**
 * Inform about environmental lighting conditions of a particular streetlight.
 * @param {object} options
 * @param {object} options.message
 * @param {integer} options.message.headers.my-app-header
 * @param {integer} options.message.payload.lumens - Light intensity measured in lumens.
 * @param {string} options.message.payload.sentAt - Date and time when the message was sent.
 */
handler.receiveLightMeasurement = async ({message}) => {
  // Implement your business logic here...
};
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should use mqtt logic for mqtts protocol 5`] = `
"const Router = require('hermesjs/lib/router');
const {validateMessage} = require('../../lib/message-validator');
const router = new Router();
const smartylightingStreetlights10ActionStreetlightIdDimHandler = require('../handlers/smartylighting-streetlights-1-0-action-{streetlightId}-dim');
module.exports = router;



router.useOutbound('smartylighting/streetlights/1/0/action/:streetlightId/dim', async (message, next) => {
  try {
    
    await validateMessage(message.payload,'smartylighting/streetlights/1/0/action/{streetlightId}/dim','dimLight','subscribe');
    await smartylightingStreetlights10ActionStreetlightIdDimHandler.dimLight({message});
    next();
    
  } catch (e) {
    next(e);
  }
});
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should use mqtt logic for mqtts protocol 6`] = `
"const Router = require('hermesjs/lib/router');
const {validateMessage} = require('../../lib/message-validator');
const router = new Router();
const smartylightingStreetlights10ActionStreetlightIdTurnOffHandler = require('../handlers/smartylighting-streetlights-1-0-action-{streetlightId}-turn-off');
module.exports = router;



router.useOutbound('smartylighting/streetlights/1/0/action/:streetlightId/turn/off', async (message, next) => {
  try {
    
    await validateMessage(message.payload,'smartylighting/streetlights/1/0/action/{streetlightId}/turn/off','turnOnOff','subscribe');
    await smartylightingStreetlights10ActionStreetlightIdTurnOffHandler.turnOff({message});
    next();
    
  } catch (e) {
    next(e);
  }
});
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should use mqtt logic for mqtts protocol 7`] = `
"const Router = require('hermesjs/lib/router');
const {validateMessage} = require('../../lib/message-validator');
const router = new Router();
const smartylightingStreetlights10ActionStreetlightIdTurnOnHandler = require('../handlers/smartylighting-streetlights-1-0-action-{streetlightId}-turn-on');
module.exports = router;



router.useOutbound('smartylighting/streetlights/1/0/action/:streetlightId/turn/on', async (message, next) => {
  try {
    
    await validateMessage(message.payload,'smartylighting/streetlights/1/0/action/{streetlightId}/turn/on','turnOnOff','subscribe');
    await smartylightingStreetlights10ActionStreetlightIdTurnOnHandler.turnOn({message});
    next();
    
  } catch (e) {
    next(e);
  }
});
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should use mqtt logic for mqtts protocol 8`] = `
"const Router = require('hermesjs/lib/router');
const {validateMessage} = require('../../lib/message-validator');
const router = new Router();
const smartylightingStreetlights10EventStreetlightIdLightingMeasuredHandler = require('../handlers/smartylighting-streetlights-1-0-event-{streetlightId}-lighting-measured');
module.exports = router;



/**
 * Inform about environmental lighting conditions of a particular streetlight.
 */
router.use('smartylighting/streetlights/1/0/event/:streetlightId/lighting/measured', async (message, next) => {
  try {
    
    await validateMessage(message.payload,'smartylighting/streetlights/1/0/event/{streetlightId}/lighting/measured','lightMeasured','publish');
    await smartylightingStreetlights10EventStreetlightIdLightingMeasuredHandler.receiveLightMeasurement({message});
    next();
    
  } catch (e) {
    next(e);
  }
});
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should use mqtt logic for mqtts protocol 9`] = `
"const Hermes = require('hermesjs');
const app = new Hermes();
const path = require('path');
const { yellow, gray, cyan } = require('chalk');
const buffer2string = require('./middlewares/buffer2string');
const string2json = require('./middlewares/string2json');
const json2string = require('./middlewares/json2string');
const logger = require('./middlewares/logger');
const errorLogger = require('./middlewares/error-logger');
const config = require('../lib/config');
const serverConfig = config.broker.mqtt;
const MqttAdapter = require('hermesjs-mqtt');
const smartylightingStreetlights10EventStreetlightIdLightingMeasured = require('./routes/smartylighting-streetlights-1-0-event-{streetlightId}-lighting-measured.js');
const smartylightingStreetlights10ActionStreetlightIdTurnOn = require('./routes/smartylighting-streetlights-1-0-action-{streetlightId}-turn-on.js');
const smartylightingStreetlights10ActionStreetlightIdTurnOff = require('./routes/smartylighting-streetlights-1-0-action-{streetlightId}-turn-off.js');
const smartylightingStreetlights10ActionStreetlightIdDim = require('./routes/smartylighting-streetlights-1-0-action-{streetlightId}-dim.js');

app.addAdapter(MqttAdapter, serverConfig);

app.use(buffer2string);
app.use(string2json);
app.use(logger);

// Channels
console.log(cyan.bold.inverse(' SUB '), gray('Subscribed to'), yellow('smartylighting/streetlights/1/0/event/{streetlightId}/lighting/measured'));
app.use(smartylightingStreetlights10EventStreetlightIdLightingMeasured);
console.log(yellow.bold.inverse(' PUB '), gray('Will eventually publish to'), yellow('smartylighting/streetlights/1/0/action/{streetlightId}/turn/on'));
app.useOutbound(smartylightingStreetlights10ActionStreetlightIdTurnOn);
console.log(yellow.bold.inverse(' PUB '), gray('Will eventually publish to'), yellow('smartylighting/streetlights/1/0/action/{streetlightId}/turn/off'));
app.useOutbound(smartylightingStreetlights10ActionStreetlightIdTurnOff);
console.log(yellow.bold.inverse(' PUB '), gray('Will eventually publish to'), yellow('smartylighting/streetlights/1/0/action/{streetlightId}/dim'));
app.useOutbound(smartylightingStreetlights10ActionStreetlightIdDim);

app.use(errorLogger);
app.useOutbound(errorLogger);
app.useOutbound(logger);
app.useOutbound(json2string);

app
  .listen()
  .then((adapters) => {
    console.log(cyan.underline(\`\${config.app.name} \${config.app.version}\`), gray('is ready!'), '\\\\n');
    adapters.forEach(adapter => {
      console.log('ðŸ”— ', adapter.name(), gray('is connected!'));
    });
  })
  .catch(console.error);
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should use mqtt logic for mqtts protocol 10`] = `
"default:
  app:
    name: Streetlights MQTT API
    version: 1.0.0

  broker:
    mqtt:
      url: mqtts://test.mosquitto.org:8886
      topics: [\\"smartylighting/streetlights/1/0/event/+/lighting/measured\\"]
      qos:
      protocol: mqtt
      retain:
      subscribe: true

development:

test:

staging:

production:
"
`;

exports[`template integration tests for generated files using the generator and mqtt example should use mqtt logic for mqtts protocol 11`] = `
"{
  \\"name\\": \\"streetlights-mqtt-api\\",
  \\"description\\": \\"The Smartylighting Streetlights API allows you to remotely manage the city lights.  ### Check out its awesome features:  * Turn a specific streetlight on/off ðŸŒƒ * Dim a specific streetlight ðŸ˜Ž * Receive real-time information about environmental lighting conditions ðŸ“ˆ \\",
  \\"version\\": \\"1.0.0\\",
  \\"scripts\\": {
    \\"start\\": \\"node src/api/index.js\\"
  },
  \\"dependencies\\": {
    \\"chalk\\": \\"4.1.2\\",
    \\"dotenv\\": \\"8.1.0\\",
    \\"hermesjs\\": \\"2.x\\",
    \\"hermesjs-router\\": \\"1.x\\",
    \\"asyncapi-validator\\": \\"3.0.0\\",
    \\"hermesjs-mqtt\\": \\"2.x\\",
    
    \\"node-fetch\\": \\"2.6.0\\",
    \\"node-yaml-config\\": \\"0.0.4\\"
  }
}"
`;
